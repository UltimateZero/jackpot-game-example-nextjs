import React, { useEffect, useState, useRef } from "react";
import type { NextPage } from "next";
import Head from "next/head";
import styles from "../styles/Home.module.css";
import { useAuth } from "../context/AuthContext";
import { sendRollRequest } from "../lib/get-account";

const symbolsMap = new Map<string, string>([
  ["cherry", "🍒"],
  ["lemon", "🍋"],
  ["orange", "🍊"],
  ["watermelon", "🍉"],
]);
const symbols = Array.from(symbolsMap.keys());

const toEmoji = (fruit: string) => {
  return symbolsMap.get(fruit) || "🍒";
};

const Block = ({ value, index, numberOfBlocks }) => {
  const [currentValue, setCurrentValue] = useState<number>(0);
  const [spinning, setSpinning] = useState<boolean>(false);
  const intervalRef = useRef(null);
  const spinDelay = (numberOfBlocks - index + 1) * 30;
  const resultDelay = (index + 1) * 1000;

  const stopSpin = () => {
    if (intervalRef.current) clearInterval(intervalRef.current);
    intervalRef.current = null;
  };

  const startSpin = () => {
    stopSpin();
    intervalRef.current = setInterval(() => {
      setCurrentValue((currentValue) => {
        let newValue = Math.floor(Math.random() * symbols.length);
        return newValue === currentValue
          ? (newValue + 1) % symbols.length
          : newValue;
      });
    }, spinDelay);
  };

  useEffect(() => {
    if (value === -2) {
      return;
    } else if (value === -1) {
      setSpinning(true);
      startSpin();
      return;
    }
    // else, we have value
    setTimeout(() => {
      setSpinning(false);
      stopSpin();
      setCurrentValue(value);
      console.log("set value to", value);
    }, resultDelay);
  }, [value]);

  return (
    <div className="block">
      <span>B</span>
          <span className={spinning ? "" : "block-done"}>
            {toEmoji(symbols[currentValue])}
          </span>
      <span>A</span>
        
    </div>
  );
};

const Home: NextPage = () => {
  const { user, balance, credit, login, logout, updateCredit } = useAuth();
  const [blocksIndices, setBlocksIndices] = useState([-2, -2, -2]);

  const handlePlayClicked = () => {
    setBlocksIndices([-1, -1, -1]);
    sendRollRequest().then(({ data }) => {
      setTimeout(() => {
        // const newBlocksIndices = blocksIndices.map((_) =>
        //   Math.floor(Math.random() * symbols.length)
        // );
        // setBlocksIndices(newBlocksIndices);
        setBlocksIndices(data.result);
        setTimeout(() => {
          updateCredit(data.credit);
        }, blocksIndices.length * 1000);
      }, 1500);
    });
  };

  useEffect(() => {
    const run = async () => {
      await login();
      console.log("Awaited", credit);
    };
    run();
  }, []);

  return (
    <div className={styles.container}>
      <Head>
        <title>Jackpot</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>Jackpot!</h1>

        <p className={styles.description}>Pricenow coding challenge</p>
        <span>Balance: {balance}</span>
        <span>Credit: {credit}</span>
        <div
          style={{
            fontSize: "3rem",
            display: "grid",
            gridTemplateColumns: "1fr 1fr 1fr",
            gap: "1rem",
          }}
        >
          {blocksIndices.map((blockIdx, index) => {
            return (
              <Block
                key={index}
                index={index}
                numberOfBlocks={blocksIndices.length}
                value={blockIdx}
              ></Block>
            );
          })}
        </div>
        <button
          style={{ marginTop: "30px", fontSize: "2rem" }}
          onClick={handlePlayClicked}
        >
          Play
        </button>
      </main>
    </div>
  );
};

export default Home;
